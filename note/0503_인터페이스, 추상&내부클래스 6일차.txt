### 인터페이스(interface) ###
 - 설계(Class는 구현, interface는 설계)
 - 서로 다른 개체들간의 연결을 위해 존재하는 모든 것들_연결하면서 역할이 있음
 - 연결(Connection), 역할(Role) : 서로를 연결해서 어떤 역할을 하게 만든 모든 것들_서로 다른 2개를 연결하기 위해 있는것들
   즉 무엇과 무엇을 연결하고 어떤역할을 하는지를 보는것이 인터페이스의 의의.
 - 인터페이스는 하위 클래스들의 설계에 해당하는 것
 - 인터페이스에는 생성자가 당연히 없고, 객체 생성이 불가능하다.
 - 인터페이스는 인터페이스를 상속받을 수 있다. ( 상속 : extends / 구현 : implements)
 - 클래스는 인터페이스를 구현할 수 있다.(인터페이스가 위에 있음 , 설계이니깐) 
 - 클래스는 클래스를 상속 받을 수 있다.(단일상속만 가능 - 충돌의 위험성이 있음.)

<UML(unified modeling language): 그림으로 나타내어 이해하기 쉽게 하는 언어적 도구>
클래스가 인터페이스를 구현하거나 혹은 클래스가 추상클래스에게 상속 받고 추상클래스가 인터페이스를 구현하는 형태로 많이 쓰임.
즉 C --▷ I 혹은 C --▶ AC  --▷ I 의 형태가 된다. / C : 클래스, AC : 추상클래스, I : 인터페이스, --▷ : 구현, --▶ : 상속

  
 - 문법
   1. 대부분이 public interface 인터페이스명 { // public인 이유 : 누구나 사용할 수 있게 만들기 위해서, 인터메이스명 : 대문자로
	// 상수
	// 추상메소드의 시그니쳐
	//
}
   2. 예시
   public interface Monitor{
       public static final int INCH_TWENTYFOUR = 24;
       public static final int INCH_THIRTY = 30;
       public static final int INCH_FOURITY = 40;
       abstract int getInch(); // 추상메소드 : 앞에 abstract를 붙임. 설계만 하고 구현은 밑에서 함.
}

 - 추상메소드 (abstract method)
  1. 메소드의 설계 = 기능의 설계_호출하기 위해 만든 메소드
  2. 하위에서 구현하게 하기 위한 목적을 가진 메소드 시그니쳐
  3. 메소드 앞에 abstract 키워드를 붙이면 추상 메소드
  4. 추상메소드는 구현 불가 { } 사용 X /  ; 로 끝남



### 추상클래스 (Abstract Class) ###
 - 반설계, 반구현
 - 아직까지 설계대로 전체 메소드(기능)를 다 구현할 수 없는 경우
 - 일반클래스(구체클래스 = concreate class)에서 추상클래스를 상속받아
   추상클래스에서 미구현한 메소들들을 모두 구현하여 객체를 생성
 - 만약에 클래스에 하나라도 추상메소드가 있으면 추상클래스여야 한다. 즉, 객체 생성 불가



### OOP 실습 ###

# 패키지 : javabasic.oop.art

* 아트(Art) 인터페이스 필요

* AbstractArt 추상 클래스 필요 : 공통 메소드 기본 구현

* 미술(Drawing), 음악(Music), 영화(Movie) 클래스가 필요

* 미술, 음악, 영화 의 공통 메소드, 개별 메소드 정의

* ArtMain 클래스를 생성해서 테스트


공통 : 감상한다.

미술 : 그린다.
음악 : 연주한다.
영화 : 촬영한다.


















