### OOP(Object Oriented Programming - 객체지향프로그램) ###
- 객체들 상호간에 메세지를 주고 받도록 프로그래밍 하는 기법
- 메세지  전달 : 메소드 호출(method invocation)
- 클래스(Class) : 객체를 생성하기 위한 틀(Template Of Object)
- 객체(Object) : 데이터(member variable) + 기능(menber method)
- 함수(function) :  한번에 수행할 문장들의 집합
- 메소드(method) : 함수 중에서 객체로 접근할 수 있는 함수

설계도(Template Of Object) - Class
 - 생성할 객체의 형식을 정하는 것

구현체(Implementation) - Object : 데이터 + 기능(member variable_멤버 변수 + member method)

JVM의 메모리
 - method area : 클래스의 바이너리코드, 메소드, static 멤버 변수 / 생성되면 끝까지 가지고 있으므로 static이 많으면 효율이 떨어질 수 있다.
 - heap area : 객체, non-static 멤버 변수, 메모리가 가득차면 (out of memory) 에러 발생_무한루프 생성시
 - stack area : 메소드 호출 스택 / stack overflow : 중복된 순환참조로 인해 stack이 무한히 쌓일떄

JVM의 실행 시점
 - 코딩 > 컴파일 > 클래스로딩 > 런타임 
 - 클래스로딩 : method area가 메모리에 생성된은 시점
 - 런타임(rumtime) : 객체가 생성되고 어플리케이션이 실행되는 시점

main의 static 
 - 모든 객체가 공유 = 어떤 객체에서 static변수의 값을 변경하면 모든 객채의 static변수의 값이 같이 변경
 - 자바가 처음 실행되면 static이 있는 메인을 가장 먼저 찾아서 실행될 수 있게 해준다.
 - 처음에는 객체가 없어서 객체 없이 메인이 실행될 수 있게 해주는게 static, 즉 클래스로딩 타임 = 객체 X = 객체없이 사용할 데이터/기능
*main메소드를 static으로 선언해야 하는 이유 : 객체 없이 호출 해야하는 엔트리메소드(진입메소드) 이므로

static 생성 후 non-static이 생성되므로 non-static은 static을 참조할 수 있으나 반대는 안된다.


### 생성자(Constructor) ###
- 역할 : 객체가 생성될 떄 객체의 멤버변수들을 초기화
- 형태
  1. 반환타입이 없다(void도 없음_void는 반환을 필요로 하지 않는 메소드이나 생성자는 사용 불가능_사용하면  메소드가 되어버림)
  2. 생성자명은 클래스명과 동일
  3. 만약에 Board라는 클래스의 생성자라면
     1). Board() : 기본생성자(default constructor), 기본생성자는 코딩하지 않아도 자동으로 생성됨 Board() {}
     2). Board(int articleNo) : 파라미터가 있는 생성자
      *** 파라미터가 있는 생성자를 클래스에 코딩하면 파라미터가 없는 생성자(기본생성자)를 안만들어줌

* 생성자 오버로딩 (Constructor overloading)
- 동일한 이름의 생성자를 파라미터 개수, 타입, 순서를 달리해서 여러개 만드는 것
- 오버로딩의 목적은 생성자명을 단일화 시킴

### 메소드(method) ###

- 메소드 : 기능
  1. 호출해서 실행할 코드의 블럭
  2. 메소드명은 소문자로 시작
  3. 메소드명은 동사로 시작(관례) : getData(O), dataGet(X) 
  4. 메소드 파라미터(parameter), 인자(argument)
    1). 파라미터 : 메소드 선언시에 정의
    2). 인자 : 메소드 호출시에 정의
    - 메소드 선언 예)
      int add(int a, int b) { //a, b 파라미터
        return a+b;
      }

 - 메소드 호출 예)
  add(10, 20)  // 10, 20 인자 

 - 메소드 선언
   접근지정자(public, private ...) [static] 반환타입 메소드명(파라미터리스트) {
   ... 코드들...
   return; // 제어만 변경, 생략가능
   return 값; // 값은 반환, 생략불가
}

- 메소드는 모듈의 가장 작은 단위로 모듈화 프로그래밍의 기본
- 하나의 메소드는 하나의 기능만 하도록 하는 것이 가장 좋은 메소드를 만드는 설계
